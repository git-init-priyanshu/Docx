scalar ObjectId

scalar Date

scalar JSON

type User {
  _id: ObjectId!
  firstName: String!
  lastName: String!
  email: String!
  isVerified: Boolean!
  isAdmin: Boolean!
  verifyToken: String!
  verifyTokenExpiry: Date!
  forgotPasswordToken: String!
  forgotPasswordTokenExpiry: Date!
}

type Data {
  data: String
}

type Doc {
  _id: ObjectId!
  name: String!
  docId: String!
  email: [String!]
  data: JSON
  thumbnail: String!
  creator: String!
  createdAt: Date!
  isShared: Boolean!
}

type userOutput {
  success: Boolean!
  token: String!
}

type Query {
  getAllDocs(token: String): [Doc!]
  findUser(token: String): Boolean!
  getDocData(docId: String!): Doc
}

input docInput {
  docId: String!
  emailId: String!
}

input signupInput {
  firstName: String!
  lastName: String!
  emailId: String!
  password: String!
}

input loginInput {
  emailId: String!
  password: String!
}
type Mutation {
  createDoc(docId: String!, emailId: String!, docName: String!): Boolean!
  addDoc(data: docInput): Boolean!
  saveThumbnail(docId: String!, thumbnail: String!): Boolean!
  saveDoc(docId: String!, data: JSON!): Boolean!
  changeDocName(
    docId: String!
    userEmail: String!
    newDocName: String!
  ): Boolean!

  login(data: loginInput!): userOutput!
  signup(data: signupInput!): userOutput!
  changeText(docId: String!, userEmail: String!, data: JSON!): Boolean!
  deleteEmail(
    docId: String!
    deleteEmail: String!
    userEmail: String!
  ): Boolean!
}

type Subscription {
  subscribeToDoc: Doc!
  reflectChanges(docId: String!, userEmail: String!): JSON!
}
